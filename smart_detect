from fastapi import APIRouter
import threading
import time

router = APIRouter()  # ? this exposes the router

# -----------------------
# Mock GPIO for testing
# -----------------------
class MockGPIO:
    BCM = "BCM"
    OUT = "OUT"
    HIGH = 1
    LOW = 0
    def __init__(self):
        self.states = {}
    def setmode(self, mode): print(f"[MockGPIO] setmode({mode})")
    def setwarnings(self, flag): pass
    def setup(self, pin, mode):
        self.states[pin] = "OFF"
        print(f"[GPIO] setup pin {pin}")
    def output(self, pin, state):
        self.states[pin] = "ON" if state == self.LOW else "OFF"
        print(f"[GPIO] Pin {pin} -> {self.states[pin]}")
    def cleanup(self):
        print("[GPIO] cleanup")
        self.states.clear()

# -----------------------
# Globals
# -----------------------
HARDWARE_AVAILABLE = False
GPIO = MockGPIO()
RELAY_PINS = [2, 3, 4, 17]
DETECTION_RUNNING = False
DETECTION_THREAD = None

# -----------------------
# Hardware initialization
# -----------------------
def initialize_hardware():
    global GPIO
    GPIO.setmode(GPIO.BCM)
    GPIO.setwarnings(False)
    for pin in RELAY_PINS:
        GPIO.setup(pin, GPIO.OUT)
        GPIO.output(pin, GPIO.HIGH)
    print("? Hardware initialized (mock)")

def cleanup_hardware():
    GPIO.cleanup()
    print("?? GPIO cleaned up")

# -----------------------
# Detection loop
# -----------------------
def detection_loop():
    global DETECTION_RUNNING
    DETECTION_RUNNING = True
    while DETECTION_RUNNING:
        # Toggle relays for demonstration
        for pin in RELAY_PINS:
            GPIO.output(pin, GPIO.LOW)
        print(f"[DETECTION] Relay states: {GPIO.states}")
        time.sleep(2)
        for pin in RELAY_PINS:
            GPIO.output(pin, GPIO.HIGH)
        time.sleep(2)
    print("?? Detection stopped")

# -----------------------
# FastAPI endpoints
# -----------------------
@router.post("/initialize")
def start_hardware():
    initialize_hardware()
    return {"message": "Hardware initialized"}

@router.post("/start")
def start_detection():
    global DETECTION_THREAD, DETECTION_RUNNING
    if DETECTION_RUNNING:
        return {"message": "Detection already running"}
    DETECTION_THREAD = threading.Thread(target=detection_loop, daemon=True)
    DETECTION_THREAD.start()
    return {"message": "Detection started"}

@router.post("/stop")
def stop_detection():
    global DETECTION_RUNNING
    DETECTION_RUNNING = False
    return {"message": "Detection stopped"}

@router.post("/cleanup")
def cleanup():
    cleanup_hardware()
    return {"message": "Hardware cleaned up"}

@router.get("/status")
def status():
    return {
        "hardware": "mock",
        "detection_running": DETECTION_RUNNING,
        "relays": GPIO.states
    }
