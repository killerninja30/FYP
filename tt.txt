from fastapi import APIRouter, Response
from fastapi.responses import JSONResponse
from ultralytics import YOLO
from picamera2 import Picamera2
import RPi.GPIO as GPIO
import time
import threading
import traceback
import random

router = APIRouter(tags=["Smart Detection"])

# ==============================
# --- Global Config ---
# ==============================
RELAY_PINS = [2, 3, 4, 17]
GPIO.setmode(GPIO.BCM)
for pin in RELAY_PINS:
    GPIO.setup(pin, GPIO.OUT)
    GPIO.output(pin, GPIO.HIGH)

model = YOLO("yolov8n.pt")

camera_instance = None
camera_lock = threading.Lock()

def get_camera():
    global camera_instance
    with camera_lock:
        if camera_instance is None:
            camera_instance = Picamera2()
            camera_instance.preview_configuration.main.size = (640, 480)
            camera_instance.preview_configuration.main.format = "RGB888"
            camera_instance.configure("preview")
            camera_instance.start()
        return camera_instance


def turn_off_all_relays():
    for pin in RELAY_PINS:
        GPIO.output(pin, GPIO.HIGH)


# ==============================
# --- Endpoints ---
# ==============================

@router.get("/system-status")
def system_status():
    try:
        return {
            "camera_available": True,
            "relays_configured": len(RELAY_PINS),
            "uptime": time.strftime("%H:%M:%S", time.gmtime(time.time())),
        }
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": str(e)})


@router.get("/relay-status")
def relay_status():
    states = {str(pin): ("ON" if GPIO.input(pin) == GPIO.LOW else "OFF") for pin in RELAY_PINS}
    return {"relays": states}


@router.get("/analytics")
def analytics():
    return {
        "daily_detections": random.randint(1, 10),
        "energy_saved": round(random.uniform(1.5, 5.0), 2)
    }


@router.post("/detect")
def detect():
    try:
        picam2 = get_camera()
        frame = picam2.capture_array()
        results = model(frame, classes=0, conf=0.25, verbose=False)
        human_detected = any(len(r.boxes) > 0 for r in results)

        if human_detected:
            GPIO.output(2, GPIO.LOW)
            GPIO.output(3, GPIO.LOW)
        else:
            turn_off_all_relays()

        return {
            "human_detected": human_detected,
            "occupied_zones": [(0, 1)] if human_detected else [],
            "commands": [
                {"zone": (0, 1), "status": "ON" if human_detected else "OFF", "appliances": ["Light", "Fan"]}
            ]
        }

    except Exception as e:
        print("[ERROR] Detection failed:", e)
        traceback.print_exc()
        return Response(
            content='{"error": "Detection failed"}',
            media_type="application/json",
            status_code=500
        )


@router.post("/relay-control")
def relay_control(relay: int, state: str):
    if relay not in RELAY_PINS:
        return {"error": "Invalid relay pin"}
    GPIO.output(relay, GPIO.LOW if state.lower() == "on" else GPIO.HIGH)
    return {"relay": relay, "state": state.upper()}


@router.post("/emergency-stop")
def emergency_stop():
    turn_off_all_relays()
    return {"message": "All relays turned OFF in emergency stop."}


@router.get("/alerts")
def alerts():
    alerts_data = [
        {"type": "warning", "message": "Camera temporarily offline"},
        {"type": "info", "message": "All systems nominal"},
    ]
    return {"alerts": alerts_data}


@router.on_event("shutdown")
def cleanup_gpio():
    GPIO.cleanup()
